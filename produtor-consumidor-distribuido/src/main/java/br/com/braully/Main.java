/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.braully;

import br.com.braully.buffer.Buffer;
import br.com.braully.buffer.IBufferRemote;
import br.com.braully.consumidor.Consumidor;
import br.com.braully.produtor.Produtor;
import java.io.File;
import java.rmi.Naming;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author braullyrocha
 */
public class Main extends javax.swing.JFrame {

    private List<String> elementos = new ArrayList<String>();

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        initRmiRegistry();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        pnTipo = new javax.swing.JPanel();
        rdBuffer = new javax.swing.JRadioButton();
        rdProdutor = new javax.swing.JRadioButton();
        rdConsumidor = new javax.swing.JRadioButton();
        pnLocalizacao = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPorta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtQuant = new javax.swing.JTextField();
        btnInstanciar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblElementos = new javax.swing.JTable();
        pnLog = new javax.swing.JScrollPane();
        pnTxtLog = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Produtor Consumidor Buffer Limitado - MAIN");
        setPreferredSize(new java.awt.Dimension(800, 600));

        pnTipo.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo"));

        buttonGroup1.add(rdBuffer);
        rdBuffer.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        rdBuffer.setText("Buffer");
        rdBuffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBufferActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdProdutor);
        rdProdutor.setText("Produtor");
        rdProdutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdProdutorActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdConsumidor);
        rdConsumidor.setText("Consumidor");

        javax.swing.GroupLayout pnTipoLayout = new javax.swing.GroupLayout(pnTipo);
        pnTipo.setLayout(pnTipoLayout);
        pnTipoLayout.setHorizontalGroup(
            pnTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTipoLayout.createSequentialGroup()
                .addGroup(pnTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdBuffer)
                    .addComponent(rdProdutor)
                    .addComponent(rdConsumidor))
                .addGap(0, 151, Short.MAX_VALUE))
        );
        pnTipoLayout.setVerticalGroup(
            pnTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTipoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(rdBuffer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdProdutor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdConsumidor)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnLocalizacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Localização"));

        jLabel1.setText("Host:");

        txtHost.setText("localhost");
        txtHost.setToolTipText("");
        txtHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHostActionPerformed(evt);
            }
        });

        jLabel2.setText("Porta:");

        txtPorta.setText("1099");
        txtPorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortaActionPerformed(evt);
            }
        });

        jLabel3.setText("Quant.:");

        txtQuant.setText("1");
        txtQuant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantActionPerformed(evt);
            }
        });

        btnInstanciar.setText("Instanciar");
        btnInstanciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstanciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnLocalizacaoLayout = new javax.swing.GroupLayout(pnLocalizacao);
        pnLocalizacao.setLayout(pnLocalizacaoLayout);
        pnLocalizacaoLayout.setHorizontalGroup(
            pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLocalizacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnLocalizacaoLayout.createSequentialGroup()
                        .addGroup(pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHost)
                            .addGroup(pnLocalizacaoLayout.createSequentialGroup()
                                .addGroup(pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 64, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnLocalizacaoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnInstanciar)))
                .addContainerGap())
        );
        pnLocalizacaoLayout.setVerticalGroup(
            pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLocalizacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnLocalizacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInstanciar)
                .addContainerGap())
        );

        tblElementos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Elemento", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblElementos);

        pnLog.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        pnLog.setViewportView(pnTxtLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnLog)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnLocalizacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnLocalizacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnLog, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHostActionPerformed

    private void txtQuantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantActionPerformed

    private void btnInstanciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstanciarActionPerformed
        try {
            ButtonModel selection = buttonGroup1.getSelection();

            if (selection == null) {
                JOptionPane.showMessageDialog(null, "Selecione um dos tipos de componentes para serem instanciados (Buffer, Consumidor ou Produtor).");
                return;
            }

            String srtHost = getHost();
            String strPorta = txtPorta.getText();
            String strQuant = txtQuant.getText();

            int porta = Integer.parseInt(strPorta.replaceAll("\\D+", ""));
            int quant = Integer.parseInt(strQuant.replaceAll("\\D+", ""));

            if (rdBuffer != null && rdBuffer.isSelected()) {
                instanciarBuffer(srtHost, porta, quant);
            } else if (rdConsumidor != null && rdConsumidor.isSelected()) {
                instanciarConsumidor(srtHost, porta, quant);
            } else if (rdProdutor != null && rdProdutor.isSelected()) {
                instanciarProdutor(srtHost, porta, quant);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Falha ao instanciar: " + e.getLocalizedMessage() + " " + e.getMessage());
        }
    }//GEN-LAST:event_btnInstanciarActionPerformed

    private void rdBufferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBufferActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdBufferActionPerformed

    private void rdProdutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdProdutorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdProdutorActionPerformed

    private void txtPortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPortaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInstanciar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnLocalizacao;
    private javax.swing.JScrollPane pnLog;
    private javax.swing.JPanel pnTipo;
    private javax.swing.JTextPane pnTxtLog;
    private javax.swing.JRadioButton rdBuffer;
    private javax.swing.JRadioButton rdConsumidor;
    private javax.swing.JRadioButton rdProdutor;
    private javax.swing.JTable tblElementos;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtPorta;
    private javax.swing.JTextField txtQuant;
    // End of variables declaration//GEN-END:variables

    private void instanciarBuffer(String srtHost, int porta, int quant) throws Exception {
        if (quant > 1) {
            throw new IllegalArgumentException("Somente um buffer pode ser instanciado");
        }
        Buffer buffer = new Buffer();
        String idElemento = "buffer/0";
        String urlBufferRemoto = gerUrlbufferRemoto(srtHost, porta);
        Naming.rebind(urlBufferRemoto, buffer);
        appendLog("Buffer instanciado em " + srtHost);
        inserirElementoTabela(idElemento);
    }

    private void instanciarConsumidor(String srtHost, int porta, int quant) {
        for (int i = 0; i < quant; i++) {
            try {
                IBufferRemote referenciaRemotaBuffer = getReferenciaRemotaBuffer(srtHost, porta);
                Consumidor consumidor = new Consumidor(referenciaRemotaBuffer);
                consumidor.iniciar();
                String identificadorProdutor = consumidor.getIdentificadorConsumidor();
                inserirElementoTabela(identificadorProdutor);
            } catch (Exception e) {
                throw new IllegalStateException("ao instanciar buffer", e);
            }
        }
    }

    private void instanciarProdutor(String srtHost, int porta, int quant) {
        for (int i = 0; i < quant; i++) {
            try {
                IBufferRemote referenciaRemotaBuffer = getReferenciaRemotaBuffer(srtHost, porta);
                Produtor produtor = new Produtor(referenciaRemotaBuffer);
                produtor.iniciar();
                String identificadorProdutor = produtor.getIdentificadorProdutor();
                inserirElementoTabela(identificadorProdutor);
            } catch (Exception e) {
                throw new IllegalStateException("ao instanciar buffer", e);
            }
        }
    }

    private void initRmiRegistry() {
        try {
            File fileAtual = new File(this.getClass().getClassLoader().getResource("").getPath());
            String caminhoPath = fileAtual.getAbsolutePath();
            String comandoStart = "rmiregistry -J-cp -J\"" + caminhoPath + "\" 1099";
            appendLog("Executar: " + comandoStart);
//            Process p = Runtime.getRuntime().exec(comandoStart);
        } catch (Exception e) {
//            e.printStackTrace();
        }
    }

    private void appendLog(String comandoStart) {
        String texto = pnTxtLog.getText() + comandoStart + "\n";
        pnTxtLog.setText(texto);
    }

    private void inserirElementoTabela(String idElemento) {
        this.elementos.add(idElemento);
        atualizarTabela();
    }

    public void atualizarTabela() {
        DefaultTableModel tableModel = (DefaultTableModel) tblElementos.getModel();
        tableModel.setRowCount(0);
        for (int i = 0; i < elementos.size(); i++) {
            String[] data = new String[1];
            data[0] = elementos.get(i);
            tableModel.addRow(data);
        }
        tblElementos.setModel(tableModel);
        tableModel.fireTableDataChanged();
    }

    private IBufferRemote getReferenciaRemotaBuffer() {
        return getReferenciaRemotaBuffer(getHost(), getPorta());
    }

    public IBufferRemote getReferenciaRemotaBuffer(String srtHost, int porta) {
        try {
            String urlbufferRemoto = gerUrlbufferRemoto(srtHost, porta);
            IBufferRemote bufferRemoto = (IBufferRemote) Naming.lookup(urlbufferRemoto);
            return bufferRemoto;
        } catch (Exception e) {
            throw new IllegalStateException("Falha ao localizar buffer", e);
        }
    }

    private String gerUrlbufferRemoto(String srtHost, int porta) {
        return "//" + srtHost + ":" + porta + "/" + "buffer/0";
    }

    private String getHost() {
        return txtHost.getText();
    }

    private int getPorta() {
        return Integer.parseInt(txtPorta.getText().replaceAll("\\D+", ""));
    }
}
